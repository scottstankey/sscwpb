{
    "contents" : "# Hello, world!\n#\n# This is an example function named 'hello'\n# which prints 'Hello, world!'.\n#\n# You can learn more about package authoring with RStudio at:\n#\n#   http://r-pkgs.had.co.nz/\n#\n# Some useful keyboard shortcuts for package authoring:\n#\n#   Build and Reload Package:  'Cmd + Shift + B'\n#   Check Package:             'Cmd + Shift + E'\n#   Test Package:              'Cmd + Shift + T'\n\n\nscripter = function (startdest, enddest, #Done\n                     startdate, enddate, #Done\n                     budget, #Done\n                     region, #Rating / Done\n                     nonstop, prefernonstop, connecting, international,\n                     activites, #Rating / Done\n                     markets) #Rating / Done\n{\n  fares <- read.csv(\"~/sscwpb/data/dontdelete.csv\", stringsAsFactors=FALSE)\n  fares = fares[,-1]\n  #TODO I want to add activations. Like people shouldn't have to click buttons on Charles UI to get to this\n  # This gets us the proper inds that we needs in the most efficient way I think. Might be a faster way to do and statements\n  fares = fares[which(fares$FareType == \"LOWEST\"),]\n  budgetlist = originlist = startdatelist = enddatelist = domesticroutelist = internationalroutelist = regionlist =  c(1 : nrow(fares))\n  if(nonstop) {\n    if(is.null(budget) == FALSE) {budgetlist = which(fares$Dollars <= budget)}\n    if(is.null(startdest) == FALSE) {originlist = which(fares$Origin == startdest)}\n    if(is.null(startdate) == FALSE) {startdatelist = which(fares$Date >= startdate)} #Find some way to get today's date???\n    if(is.null(enddate) == FALSE) {enddatelist = which(fares$Date <= enddate)} #Display flights soon first???\n    if(is.null(international) == FALSE && international == TRUE){domesticroutelist = which(fares$IsDomesticRoute == FALSE)}\n    if(is.null(international) == FALSE && international == FALSE){internationalroutelist = which(fares$IsDomesticRoute == TRUE)}\n    inds = Reduce(intersect, list(budgetlist, originlist, startdatelist, enddatelist, domesticroutelist, internationalroutelist))\n    tmp = fares[inds,]\n    layover = rep(NA, nrow(tmp))\n    flightdate1 = rep(NA, nrow(tmp))\n    tmpfinal = cbind(tmp[,\"Origin\"], layover,tmp[,c(\"FlightDate\",\n                                                    \"FareType\", \"Date\",\"Family\", \"Nightlife\", \"Exploration\",\n                                                    \"Romance\", \"Beach\",\"Destination\")], flightdate1,\n                     tmp[,c(\"Region\", \"Market\", \"DollarFare\", \"DollarTax\", \"Dollars\")])\n    colnames(tmpfinal) = c(\"Origin\", \"Layover\", \"FlightDate\", \"FareType\", \"Date\", \"Family\", \"Nightlife\", \"Exploration\",\n                           \"Romance\", \"Beach\", \"Destination\", \"ConnectingFlightDate\", \"Region\", \"Market\", \"DollarFare\", \"DollarTax\", \"Dollars\")\n\n    tmpfinal = tmpfinal[,c(\"Origin\", \"Layover\", \"Destination\", \"FlightDate\", \"FareType\", \"Date\", \"ConnectingFlightDate\",\n                           \"DollarFare\", \"DollarTax\", \"Dollars\",\"Family\", \"Nightlife\", \"Exploration\",\n                           \"Romance\", \"Beach\" ,\"Region\", \"Market\")]\n  }\n  if(connecting) {\n    if(is.null(budget) == FALSE) {budgetlist = which(fares$Dollars <= budget)}\n    if(is.null(international) == FALSE && international == TRUE){internationalroutelist = which(fares$IsDomesticRoute == FALSE)}\n    if(is.null(international) == FALSE && international == FALSE){domesticroutelist = which(fares$IsDomesticRoute == TRUE)}\n    if(is.null(startdate) == FALSE) {startdatelist = which(fares$Date >= startdate)} #Find some way to get today's date???\n    if(is.null(enddate) == FALSE) {enddatelist = which(fares$Date <= enddate)} #Display flights soon first???\n    inds = Reduce(intersect, list(budgetlist, startdatelist, enddatelist, domesticroutelist, internationalroutelist))\n    maxflightprice = budget - min(fares[inds, \"Dollars\"] )\n    inds = inds[which(fares[inds,\"Dollars\"] < maxflightprice)]\n\n    regionlist = NULL\n    for(i in inds) {\n      vec = FALSE\n      if (length(region[fares$Region[i]]) > 0 && region[fares$Region[i]] > 0) {\n        vec = TRUE\n      }\n      regionlist = c(regionlist, vec)\n    }\n    regionlist = inds[regionlist]\n\n\n    marketlist = NULL\n    for(i in inds) {\n      vec = FALSE\n      if (length(markets[fares$Market[i]]) > 0 && markets[fares$Market[i]] > 0) {\n        vec = TRUE\n      }\n      marketlist = c(marketlist, vec)\n    }\n    marketlist = inds[marketlist]\n\n    enddestlist = Reduce(intersect, list(union(regionlist, marketlist), inds))\n\n    if(is.null(startdest) == FALSE) {originlist = which(fares$Origin == startdest)}\n    startdestlist = Reduce(intersect, list(startdatelist, enddatelist,originlist))\n\n    enddestlistupdate = enddestlist[which(fares[enddestlist,\"Dollars\"] < maxflightprice)]\n    startdestlistupdate = startdestlist[which(fares[startdestlist,\"Dollars\"] < maxflightprice)]\n\n    starttmp = fares[startdestlistupdate,]\n    endtmp = fares[enddestlistupdate,]\n\n    connectingtmp = NULL\n    for(i in 1:nrow(starttmp)) {\n      firstleg = starttmp[i,]\n      joind = NULL\n      connectorigin = starttmp[i, \"Destination\"]\n      time = starttmp[i,\"Date\"]\n      firstflight = starttmp[i, \"Dollars\"]\n      culled = endtmp[intersect(which(endtmp$Date > time), which(endtmp$Origin == connectorigin)),]\n      culled = culled[which(culled$Dollars < {budget - firstflight}),]\n      joind = cbind(do.call(rbind, replicate(nrow(culled), firstleg, simplify=FALSE)),culled)\n\n      connectingtmp = rbind(connectingtmp,joind)\n    }\n    pastefunc = function(x) {paste(x,1,sep= \"\")}\n    colnames(connectingtmp) = c(colnames(tmp), sapply(colnames(tmp), pastefunc))\n\n    #need to add the fares\n\n    connectingfinal = cbind(connectingtmp[,c(\"Origin\", \"Destination\", \"FlightDate\", \"FareType\", \"Date\",\n                                             \"Family1\", \"Nightlife1\", \"Exploration1\", \"Romance1\", \"Beach1\", \"Destination1\",\n                                             \"FlightDate1\", \"Region1\", \"Market1\")], connectingtmp[,\"DollarFare\"] + connectingtmp[,\"DollarFare1\"],\n                            connectingtmp[,\"DollarTax\"] + connectingtmp[,\"DollarTax1\"], connectingtmp[,\"Dollars\"] + connectingtmp[,\"Dollars1\"])\n    colnames(connectingfinal) = c(\"Origin\", \"Layover\", \"FlightDate\", \"FareType\", \"Date\",\n                                  \"Family\", \"Nightlife\", \"Exploration\", \"Romance\", \"Beach\", \"Destination\",\n                                  \"ConnectingFlightDate\", \"Region\", \"Market\", \"DollarFare\", \"DollarTax\", \"Dollars\")\n\n    connectingfinal = connectingfinal[,c(\"Origin\", \"Layover\", \"Destination\", \"FlightDate\", \"FareType\", \"Date\", \"ConnectingFlightDate\",\n                                         \"DollarFare\", \"DollarTax\", \"Dollars\",\"Family\", \"Nightlife\", \"Exploration\",\n                                         \"Romance\", \"Beach\" ,\"Region\", \"Market\")]\n  }\n\n\n  final = rbind(tmpfinal, connectingfinal)\n\n  IsLayover = rep(T, nrow(final))\n  IsLayover[which(is.na(final[,\"Layover\"]))] = FALSE\n\n  final = cbind(final, IsLayover)\n  # Ok now lets rate this shit\n\n\n  actscore = NULL\n  for(i in 1:nrow(final))\n  {\n    vec = 0\n    vec = sum(activities * final[i,c(\"Family\", \"Nightlife\", \"Exploration\", \"Romance\", \"Beach\")])\n    actscore = c(actscore, vec)\n    print(i)\n  }\n\n  marketscore = NULL\n  for(i in 1:nrow(final))\n  {\n    if(final[i,\"Market\"] > 0){\n      vec = markets[final[i,\"Market\"]]\n    }\n    else {\n      vec = 0\n    }\n    marketscore = c(marketscore, vec)\n    print(i)\n  }\n\n  regionscore = NULL\n  for(i in 1:nrow(final))\n  {\n    if(final[i,\"Region\"]) {\n      vec = region[final[i,\"Region\"]]\n    }\n    else {\n      vec= 0\n    }\n    regionscore = c(regionscore, vec)\n    print(i)\n  }\n\n  budgetscore = exp((max(final[,\"Dollars\"]) - final[,\"Dollars\"]) / budget)\n  budgetscore = budgetscore - min(budgetscore)\n\n  layoverscore = prefernonstop * !final[,\"IsLayover\"]\n\n  newfinal = cbind(final, actscore / sum(activities),\n                   marketscore / sum(markets),\n                   if(sum(region) > 0){regionscore / sum(region)}else{0},\n                   budgetscore / {max(budgetscore) - min(budgetscore)},\n                   layoverscore,\n                   actscore / sum(activities)  + marketscore / sum(markets) + layoverscore +  budgetscore / {max(budgetscore) - min(budgetscore)} +\n                     if(sum(region) > 0){regionscore / sum(region)}else{0})\n\n  colnames(newfinal) = c(colnames(final), \"ActivitiesScore\", \"MarketScore\", \"RegionScore\", \"BudgetScore\", \"LayoverScore\", \"CompositeScore\")\n\n  outp = newfinal[order(newfinal$CompositeScore, decreasing = TRUE),]\n  #return(prettify(toJSON(outp)))\n  return(outp)\n}\n\n\n\n\n\n",
    "created" : 1446960308217.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3654266249",
    "id" : "C25708EA",
    "lastKnownWriteTime" : 1446961017,
    "path" : "~/sscwpb/R/hello.R",
    "project_path" : "R/hello.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}